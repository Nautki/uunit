use crate::*;
pub type UnitKelvin = DimensionStruct<P1, Z0, Z0, Z0, Z0, P1, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0>;
pub type Kelvin<T> = Quantity<T, UnitKelvin>;
#[cfg(feature = "si_quetta")]
pub type UnitQuettakelvin = DimensionStruct<P30, Z0, Z0, Z0, Z0, P1, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0>;
#[cfg(feature = "si_quetta")]
pub type Quettakelvin<T> = Quantity<T, UnitQuettakelvin>;
#[cfg(feature = "si_ronna")]
pub type UnitRonnakelvin = DimensionStruct<P27, Z0, Z0, Z0, Z0, P1, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0>;
#[cfg(feature = "si_ronna")]
pub type Ronnakelvin<T> = Quantity<T, UnitRonnakelvin>;
#[cfg(feature = "si_yotta")]
pub type UnitYottakelvin = DimensionStruct<P24, Z0, Z0, Z0, Z0, P1, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0>;
#[cfg(feature = "si_yotta")]
pub type Yottakelvin<T> = Quantity<T, UnitYottakelvin>;
#[cfg(feature = "si_zetta")]
pub type UnitZettakelvin = DimensionStruct<P21, Z0, Z0, Z0, Z0, P1, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0>;
#[cfg(feature = "si_zetta")]
pub type Zettakelvin<T> = Quantity<T, UnitZettakelvin>;
#[cfg(feature = "si_exa")]
pub type UnitExakelvin = DimensionStruct<P18, Z0, Z0, Z0, Z0, P1, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0>;
#[cfg(feature = "si_exa")]
pub type Exakelvin<T> = Quantity<T, UnitExakelvin>;
#[cfg(feature = "si_peta")]
pub type UnitPetakelvin = DimensionStruct<P15, Z0, Z0, Z0, Z0, P1, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0>;
#[cfg(feature = "si_peta")]
pub type Petakelvin<T> = Quantity<T, UnitPetakelvin>;
#[cfg(feature = "si_tera")]
pub type UnitTerakelvin = DimensionStruct<P12, Z0, Z0, Z0, Z0, P1, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0>;
#[cfg(feature = "si_tera")]
pub type Terakelvin<T> = Quantity<T, UnitTerakelvin>;
#[cfg(feature = "si_giga")]
pub type UnitGigakelvin = DimensionStruct<P9, Z0, Z0, Z0, Z0, P1, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0>;
#[cfg(feature = "si_giga")]
pub type Gigakelvin<T> = Quantity<T, UnitGigakelvin>;
#[cfg(feature = "si_mega")]
pub type UnitMegakelvin = DimensionStruct<P6, Z0, Z0, Z0, Z0, P1, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0>;
#[cfg(feature = "si_mega")]
pub type Megakelvin<T> = Quantity<T, UnitMegakelvin>;
#[cfg(feature = "si_kilo")]
pub type UnitKilokelvin = DimensionStruct<P3, Z0, Z0, Z0, Z0, P1, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0>;
#[cfg(feature = "si_kilo")]
pub type Kilokelvin<T> = Quantity<T, UnitKilokelvin>;
#[cfg(feature = "si_hecto")]
pub type UnitHectokelvin = DimensionStruct<P2, Z0, Z0, Z0, Z0, P1, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0>;
#[cfg(feature = "si_hecto")]
pub type Hectokelvin<T> = Quantity<T, UnitHectokelvin>;
#[cfg(feature = "si_deca")]
pub type UnitDecakelvin = DimensionStruct<P1, Z0, Z0, Z0, Z0, P1, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0>;
#[cfg(feature = "si_deca")]
pub type Decakelvin<T> = Quantity<T, UnitDecakelvin>;
#[cfg(feature = "si_deci")]
pub type UnitDecikelvin = DimensionStruct<N1, Z0, Z0, Z0, Z0, P1, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0>;
#[cfg(feature = "si_deci")]
pub type Decikelvin<T> = Quantity<T, UnitDecikelvin>;
#[cfg(feature = "si_centi")]
pub type UnitCentikelvin = DimensionStruct<N2, Z0, Z0, Z0, Z0, P1, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0>;
#[cfg(feature = "si_centi")]
pub type Centikelvin<T> = Quantity<T, UnitCentikelvin>;
#[cfg(feature = "si_milli")]
pub type UnitMillikelvin = DimensionStruct<N3, Z0, Z0, Z0, Z0, P1, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0>;
#[cfg(feature = "si_milli")]
pub type Millikelvin<T> = Quantity<T, UnitMillikelvin>;
#[cfg(feature = "si_micro")]
pub type UnitMicrokelvin = DimensionStruct<N6, Z0, Z0, Z0, Z0, P1, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0>;
#[cfg(feature = "si_micro")]
pub type Microkelvin<T> = Quantity<T, UnitMicrokelvin>;
#[cfg(feature = "si_nano")]
pub type UnitNanokelvin = DimensionStruct<N9, Z0, Z0, Z0, Z0, P1, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0>;
#[cfg(feature = "si_nano")]
pub type Nanokelvin<T> = Quantity<T, UnitNanokelvin>;
#[cfg(feature = "si_pico")]
pub type UnitPicokelvin = DimensionStruct<N12, Z0, Z0, Z0, Z0, P1, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0>;
#[cfg(feature = "si_pico")]
pub type Picokelvin<T> = Quantity<T, UnitPicokelvin>;
#[cfg(feature = "si_femto")]
pub type UnitFemtokelvin = DimensionStruct<N15, Z0, Z0, Z0, Z0, P1, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0>;
#[cfg(feature = "si_femto")]
pub type Femtokelvin<T> = Quantity<T, UnitFemtokelvin>;
#[cfg(feature = "si_atto")]
pub type UnitAttokelvin = DimensionStruct<N18, Z0, Z0, Z0, Z0, P1, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0>;
#[cfg(feature = "si_atto")]
pub type Attokelvin<T> = Quantity<T, UnitAttokelvin>;
#[cfg(feature = "si_zepto")]
pub type UnitZeptokelvin = DimensionStruct<N21, Z0, Z0, Z0, Z0, P1, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0>;
#[cfg(feature = "si_zepto")]
pub type Zeptokelvin<T> = Quantity<T, UnitZeptokelvin>;
#[cfg(feature = "si_yocto")]
pub type UnitYoctokelvin = DimensionStruct<N24, Z0, Z0, Z0, Z0, P1, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0>;
#[cfg(feature = "si_yocto")]
pub type Yoctokelvin<T> = Quantity<T, UnitYoctokelvin>;
#[cfg(feature = "si_ronto")]
pub type UnitRontokelvin = DimensionStruct<N27, Z0, Z0, Z0, Z0, P1, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0>;
#[cfg(feature = "si_ronto")]
pub type Rontokelvin<T> = Quantity<T, UnitRontokelvin>;
#[cfg(feature = "si_quecto")]
pub type UnitQuectokelvin = DimensionStruct<N30, Z0, Z0, Z0, Z0, P1, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0, Z0>;
#[cfg(feature = "si_quecto")]
pub type Quectokelvin<T> = Quantity<T, UnitQuectokelvin>;